import requests
import datetime
from config import tg_bot_token, open_weather_token
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor

bot = Bot(token=tg_bot_token)
dp = Dispatcher(bot)


@dp.message_handler(commands=["price"])
async def start_command(message: types.Message):
    await message.reply("–ê–∫—Ç—É–∞–ª—å–Ω–∏–π –∫—É—Ä—Å –≤–∞–ª—é—Ç –ù–ë–£:\n"
                        f"1 USD = 29.2549 UAH\n"
                        f"1 EUR = 31.3877 UAH\n"
                        f"1 PLN = 6.87510 UAH\n"
                        f"1 BTC =  31,290 USD\n"
                        f"1 RUB = –ó–∞ –∫–æ—Ä–∞–±–ª–µ–º\n"
                        f"üá∫üá¶C–ª–∞–≤–∞ –£–∫—Ä–∞—ó–Ω—ñ!")


@dp.message_handler(commands=["start"])
async def start_command(message: types.Message):
    await message.reply("–ü—Ä–∏–≤—ñ—Ç! –ù–∞–ø–∏—à–∏ –º–µ–Ω—ñ –Ω–∞–∑–≤—É –Ω–∞—Å–µ–ª–µ–Ω–æ–≥–æ –ø—É–Ω–∫—Ç—É!")

@dp.message_handler()
async def get_weather(message: types.Message):
    code_to_smile = {
        "Clear": "–Ø—Å–Ω–æ \U00002600",
        "Clouds": "–•–º–∞—Ä–Ω–æ \U00002601",
        "Rain": "–î–æ—â \U00002614",
        "Drizzle": "–ú—Ä—è–∫–∞ \U00002614",
        "Thunderstorm": "–ó–ª–∏–≤–∞ \U000026A1",
        "Snow": "–°–Ω—ñ–≥ \U0001F328",
        "Mist": "–ì—É—Å—Ç–∏–π —Ç—É–º–∞–Ω \U0001F32B"
    }

    try:
        r = requests.get(
            f"http://api.openweathermap.org/data/2.5/weather?q={message.text}&appid={open_weather_token}&units=metric"
        )
        data = r.json()

        city = data["name"]
        cur_weather = data["main"]["temp"]

        weather_description = data["weather"][0]["main"]
        if weather_description in code_to_smile:
            wd = code_to_smile[weather_description]
        else:
            wd = "–í–∏–≥–ª—è–Ω—å —É –≤—ñ–∫–Ω–æ, –Ω–µ —Ä–æ–∑—É–º—ñ—é —â–æ —Ç–∞–º!"

        humidity = data["main"]["humidity"]
        pressure = data["main"]["pressure"]
        wind = data["wind"]["speed"]
        sunrise_timestamp = datetime.datetime.fromtimestamp(data["sys"]["sunrise"])
        sunset_timestamp = datetime.datetime.fromtimestamp(data["sys"]["sunset"])
        length_of_the_day = datetime.datetime.fromtimestamp(data["sys"]["sunset"]) - datetime.datetime.fromtimestamp(data["sys"]["sunrise"])

        await message.reply(f"***{datetime.datetime.now().strftime('%Y-%m-%d %H:%M')}***\n"
              f"–ù–∞—Å–µ–ª–µ–Ω–∏–π –ø—É–Ω–∫—Ç: {city}\n"
              f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {cur_weather} C¬∞ | {wd}\n"
              f"–í–æ–ª–æ–≥—ñ—Å—Ç—å: {humidity}%\n"
              f"–ê—Ç–º–æ—Å—Ñ–µ—Ä–Ω–∏–π —Ç–∏—Å–∫: {pressure-260} –º–º.—Ä—Ç.—Å—Ç""\n"
              f"–í—ñ—Ç–µ—Ä: {wind} –º/—Å\n"
              f"–°–≤—ñ—Ç–∞–Ω–æ–∫: {sunrise_timestamp}\n"
              f"–ó–∞—Ö—ñ–¥ —Å–æ–Ω—Ü—è: {sunset_timestamp}\n"
              f"–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –¥–Ω—è: {length_of_the_day}\n"
              f"***–ì–∞—Ä–Ω–æ–≥–æ –¥–Ω—è!***\n"
              f"Developer: @bodya_respect \n"
              f"–†owered by Parlament Team"
              )

    except:

        await message.reply("\U00002620 –ü–µ—Ä–µ–≤—ñ—Ä –≥—Ä–∞–º–æ—Ç–Ω—ñ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–æ–≥–æ! \U00002620")


if __name__ == '__main__':
    executor.start_polling(dp)